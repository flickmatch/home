name: Deploy to AWS ECS using Private ECR

on:
  push:
    branches:
      - main
      - deploy-twilio

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO: ${{secrets.ECR_REPO}}
      IMAGE_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR (Private)
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

      - name: Build and push Docker image to ECR
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG

      - name: Update ECS service with new image
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER }}
          SERVICE_NAME: ${{ secrets.ECS_SERVICE }}
          TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
          CONTAINER_NAME: flickmatch-whatsapp-server
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION > taskdef.json

          jq \
            --arg IMAGE "$ECR_REPO:$IMAGE_TAG" \
            --arg CONTAINER "$CONTAINER_NAME" \
            '.taskDefinition.containerDefinitions |= map(if .name == $CONTAINER then .image = $IMAGE else . end)' \
            taskdef.json > new-taskdef.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "New task definition ARN: $NEW_TASK_DEF_ARN"

          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN
