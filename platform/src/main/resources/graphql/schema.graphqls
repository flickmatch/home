type Query {
    cities: [City!]!
    city(cityId: ID!): City
    event(uniqueEventId: ID!): EVENT
}

type Mutation {
    createSportsVenue(input: CreateSportsVenueInput!): MutationResult!
    createEvent(input: CreateEventInput!): MutationResult!
    joinEvent(input: JoinEventInput!): MutationResult!
    updatePlayerList(input: UpdatePlayerListInput!): MutationResult!
    initiatePayment(input: InitiatePaymentInput!): InitiatePaymentOutput!
    createUser(input: CreateUserInput!): UserResult!
    initiateRazorPayment(input:RazorPayInput!): RazorPayOutput!
    """
    This is not implemented yet, will be required for P1
    """
    registerModerator(input: RegisterModeratorInput!) :  MutationResult!
}

input CreateEventInput {
    cityId: ID!
    """
    Input Format should be yyyy-MM-dd'T'HH:mmZ
    e.g. "2023-03-27T20:00+0530"
    """
    startTime:String!
    """
    Input Format should be yyyy-MM-dd'T'HH:mmZ
    e.g. "2023-03-27T20:00+0530"
    """
    endTime: String!
    charges: Float!
    sportsVenueId: ID!
    reservedPlayersCount: Int!
    waitListPlayersCount: Int!
    """
    Not required for P0, will be defaulted to FOOTBALL
    """
    sportId: ID
    """
    Not required for P0
    """
    status: Status
    """
    Not required for P0
    """
    moderatorId: ID
}

input JoinEventInput {
    eventId: ID @deprecated(reason: "Use `uniqueEventId`.")
    cityId: ID @deprecated(reason: "Use `uniqueEventId`.")
    uniqueEventId: ID
    player: PlayerInput!
}

input InitiatePaymentInput {
    uniqueEventId: ID!
    playerInputList: [PlayerInput!]!
}

input CreateUserInput {
    email: String!
    name: String!
    phoneNumber:  String
}

input RazorPayInput {
    uniqueEventId: ID!
    playerInputList: [PlayerInput!]!
    currency: String!
    email: String!
}

type User {
    email: String!
    name: String!
    phoneNumber:  String
    userId: String
}

type RazorPayOutput {
    orderId: String!
    isInitiated: Boolean!
    amount: Float!
}

type UserResult {
    isSuccessful: Boolean!
    userId: String
}

type InitiatePaymentOutput {
    paymentLink: String
    isInitiated: Boolean!
}

input CreateSportsVenueInput {
    cityId: ID!
    displayName: String!
    googleMapsLink: String!
    """
    Not required for P0
    """
    coordinates: String
    """
    Not required for P0, will be defaulted to FOOTBALL
    """
    availableSportsIds: [ID!]

    stripePaymentLinks: [StripePaymentLinkInput!]!
}

input StripePaymentLinkInput {
    amount: Float!
    link: String!
}

input UpdatePlayerListInput {
    startTime: String!
    endTime: String!
    venueName: String!
    date: String!
    charges: String!
    format: String!
    reservedPlayersList: [PlayerInput]!
    waitListPlayers: [PlayerInput]!
}

input RegisterModeratorInput {
    cityId: ID!
    firstName: String!
    lastName: String
    contactNumber: Int!
}

input PlayerInput {
    waNumber: String
    name: String!
}

type MutationResult {
    isSuccessful: Boolean!
    errorMessage: String
}

type City {
    cityId: ID!
    cityName: String
    localTimeZone: String
    sportsVenues: [SportsVenue!]
    events: [EVENT]
    pastEvents (inDays: Int!): [EVENT]!
}

type EVENT {
    currency: String!
    startTime: String!
    endTime: String!
    eventId: String! @deprecated(reason: "Use `uniqueEventId`.")
    uniqueEventId: String!
    displayTitle: String!
    venueLocationLink: String!
    charges: Float!
    date: String!
    time: String!
    venueName: String!
    reservedPlayersCount: Int!
    waitListPlayersCount: Int!
    reservedPlayersList: [Player]
    waitListPlayers: [Player]
    """
    We need to make this mandatory in future
    """
    stripePaymentUrl: String
}

type Player {
    displayName: String!
}

type SportsVenue {
    sportsVenueId: ID!
    displayName: String!
    googleMapsLink: String!
    availableSportsIds: [ID!]
    """
    We need to make this mandatory in future
    """
    stripePaymentLinks: [StripePaymentLink!]
}

type StripePaymentLink {
    amount: Float!
    url: String!
}

type Sport {
    displayName: String!
}

"""
Not required for P0
"""
type Moderator {
    city: City!
    moderatorId: String!
    contactNumber: Int!
    firstName: String!
    lastName: String
}

interface Person {
    firstName: String!
    lastName: String
}

enum PaymentStatus {
    PENDING
    PAID
}

enum Status {
    BOOKING_OPEN
    SCHEDULED
}

type Book {
    id: ID
    name: String
    pageCount: Int
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}


