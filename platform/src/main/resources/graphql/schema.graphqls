type Query {
  cities: [City!]!
  city(cityId: ID!): City
  event(uniqueEventId: ID!): EVENT
  passes: [Pass!]!
  passesForCity(cityId: ID!): [Pass!]
  hasActiveSubscription(email: String!): Boolean!
  getActiveSubscription(email: String!): Subscription
  getUserStats(email: String!): User
  updateGameLinks: MutationResult!
  users: [User]
}

type Mutation {
  createSportsVenue(input: CreateSportsVenueInput!): MutationResult!
  createEvent(input: CreateEventInput!): MutationResult!
  joinEvent(input: JoinEventInput!): MutationResult!
  updatePlayerList(input: UpdatePlayerListInput!): MutationResult!
  initiatePayment(input: InitiatePaymentInput!): InitiatePaymentOutput!
  createUser(input: CreateUserInput!): UserResult!
  initiateRazorPayment(input: RazorPayInput!): RazorPayOutput!
  initiatePassPayment(input: PassPaymentInput!): PassPaymentOutput!
  createSubscription(input: CreateSubscriptionInput!): MutationResult!
  updateSubscription(input: UpdateSubscriptionInput!): MutationResult!
  """
  This is not implemented yet, will be required for P1
  """
  registerModerator(input: RegisterModeratorInput!): MutationResult!
  updateEventScore(input: UpdateEventScoreInput!): MutationResult!
  updateEventDetails(input: UpdateEventDetailsInput!): MutationResult!
  checkoutProducts(input: StripeInput): StripeOutput
}

input UpdateEventScoreInput{
  uniqueEventId: String!
  team1Score: Int!
  team2Score: Int!
}

input UpdateEventDetailsInput {
  uniqueEventId: String!
  startTime: String
  endTime: String
  charges: Float
  reservedPlayersCount: Int
  waitListPlayersCount: Int
  credits: Float
  testGame: Boolean
  teamDivision: Boolean
  team1Color:String
  team2Color:String
  isDeleted: Boolean
    paymentMethods:[String]
}

input CreateEventInput {
  cityId: ID!
  """
  Input Format should be yyyy-MM-dd'T'HH:mmZ
  e.g. "2023-03-27T20:00+0530"
  """
  startTime: String!
  """
  Input Format should be yyyy-MM-dd'T'HH:mmZ
  e.g. "2023-03-27T20:00+0530"
  """
  endTime: String!
  charges: Float!
  sportsVenueId: ID!
  reservedPlayersCount: Int!
  waitListPlayersCount: Int!
  credits: Float
  testGame: Boolean
  teamDivision: Boolean
  team1Color:String
  team2Color:String
  team1Name:String
  team2Name:String
  """
  Not required for P0, will be defaulted to FOOTBALL
  """
  sportId: ID
  """
  Not required for P0
  """
  status: Status
  """
  Not required for P0
  """
  moderatorId: ID
    paymentMethods:[String]
}

input JoinEventInput {
  eventId: ID @deprecated(reason: "Use uniqueEventId.")
  cityId: ID @deprecated(reason: "Use uniqueEventId.")
  uniqueEventId: ID
  player: PlayerInput!
}

input InitiatePaymentInput {
  uniqueEventId: ID!
  playerInputList: [PlayerInput!]!
}

input CreateUserInput {
  email: String!
  name: String!
  phoneNumber: String
}

input RazorPayInput {
  uniqueEventId: ID!
  playerInputList: [PlayerInput!]!
  currency: String!
  email: String!
  phoneNumber: String!
  redirectUrl: String!
  venuePinCode: String!
}

input UpdateSubscriptionInput {
  subscriptionId: String!
  credits: Float!
}

input PassPaymentInput {
  passId: ID!
  email: String!
  currency: String!
  location: String!
}

input CreateSubscriptionInput {
  passId: String!
  email: String!
}

type SubscriptionOutput {
  isSuccessful: Boolean!
  errorMessage: String
}

type Subscription {
  subscriptionId: String!
  passId: String!
  userId: String!
  expiryDate: String!
  creditsLeft: Float!
  status: String!
  cityId: String!
  title: String!
  description: String!
}

type Pass {
  passId: String!
  cityId: String!
  passType: String!
  totalGames: Int!
  totalDays: Int!
  price: Int!
  title: String!
  status: String!
  features: [String]
  description: String
#  payForGames: Int
}

type User {
  email: String!
  name: String
  phoneNumber: String
  userId: String
  matchesPlayed: Int
  wins: Int
  gameLinks: String
}

type RazorPayOutput {
  orderId: String!
  isInitiated: Boolean!
  amount: Float!
}

type UserResult {
  isSuccessful: Boolean!
  userId: String
}

type InitiatePaymentOutput {
  paymentLink: String
  isInitiated: Boolean!
}

input CreateSportsVenueInput {
  cityId: ID!
  displayName: String!
  googleMapsLink: String!
  """
  Not required for P0
  """
  coordinates: String
  """
  Not required for P0, will be defaulted to FOOTBALL
  """
  availableSportsIds: [ID!]
  pinCode: String
  stripePaymentLinks: [StripePaymentLinkInput!]!
}

input StripePaymentLinkInput {
  amount: Float!
  link: String!
}

input UpdatePlayerListInput {
  startTime: String!
  endTime: String!
  venueName: String!
  date: String!
  charges: String!
  format: String!
  reservedPlayersList: [PlayerInput]!
  waitListPlayers: [PlayerInput]!
}

input RegisterModeratorInput {
  cityId: ID!
  firstName: String!
  lastName: String
  contactNumber: Int!
}

input PlayerInput {
  waNumber: String
  name: String!
  teamColor: String
  email: String
}

type PassPaymentOutput {
  orderId: String!
  isInitiated: Boolean!
  amount: Float!
}

type MutationResult {
  isSuccessful: Boolean!
  errorMessage: String
}

type City {
  cityId: ID!
  cityName: String
  localTimeZone: String
  sportsVenues: [SportsVenue!]
  events: [EVENT]
  pastEvents(inDays: Int!): [EVENT]!
  currency: String!
  countryCode: String!
  iconUrl: String!
}

type StripeOutput {
  sessionId: String
  sessionUrl: String
  status: String
  message: String
}

input StripeInput {
   uniqueEventId :String!
   playerInputList:[PlayerInput]!
  currency:String!
  phoneNumber:String!
  redirectUrl:String!
  venuePinCode:String!
  email:String!
}

type EVENT {
  currency: String!
  startTime: String!
  endTime: String!
  eventId: String! @deprecated(reason: "Use uniqueEventId.")
  uniqueEventId: String!
  displayTitle: String!
  venueLocationLink: String!
  venuePinCode: String
  charges: Float!
  date: String!
  time: String!
  venueName: String!
  reservedPlayersCount: Int!
  waitListPlayersCount: Int!
  reservedPlayersList: [Player]
  waitListPlayers: [Player]
  """
  We need to make this mandatory in future
  """
  stripePaymentUrl: String
  credits: Float
  testGame: Boolean
  teamDivision: Boolean
  team1Color:String
  team2Color:String
  paymentMethods:[String]
  team1Score: Int
  team2Score: Int
  team1Name: String
  team2Name: String
}

type Player {
  displayName: String!
  teamColor: String
}

type SportsVenue {
  sportsVenueId: ID!
  displayName: String!
  googleMapsLink: String!
  availableSportsIds: [ID!]
  pinCode: String!
  """
  We need to make this mandatory in future
  """
  stripePaymentLinks: [StripePaymentLink!]
}

type StripePaymentLink {
  amount: Float!
  url: String!
}

type Sport {
  displayName: String!
}

"""
Not required for P0
"""
type Moderator {
  city: City!
  moderatorId: String!
  contactNumber: Int!
  firstName: String!
  lastName: String
}

interface Person {
  firstName: String!
  lastName: String
}

enum PaymentStatus {
  PENDING
  PAID
}

enum Status {
  BOOKING_OPEN
  SCHEDULED
}

type Book {
  id: ID
  name: String
  pageCount: Int
  author: Author
}

type Author {
  id: ID
  firstName: String
  lastName: String
}
